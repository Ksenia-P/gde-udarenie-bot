'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaults = require('lodash.defaults');
var sample = require('lodash.sample');
var clone = require('lodash.clone');
var AbstractEnvironment = require('goose-abstract-environment');
var debugLib = require('debug');
var phantom = require('phantom');
var path = require('path');
var mkdirp = require('mkdirp');

var _require = require('url'),
    parseUrl = _require.parse;

var fs = require('fs');

var debug = debugLib('PhantomEnvironment');
var phantomError = debugLib('Phantom:error');
var debugParser = debugLib('RedParser');

function mkdir() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new _promise2.default(function (resolve, reject) {
    return mkdirp.apply(undefined, args.concat([function (e) {
      return e ? reject(e) : resolve();
    }]));
  });
}

/**
 * @typedef {object} Proxy
 * @property {string} host
 * @property {number} port
 * @property {?string} username
 * @property {?string} password
 */

/**
 * @typedef {object} ProxyIndicator
 * @property {string} type
 * @property {string} level Possible levels - high, medium, low
 */

/**
 * type=redirect
 * @typedef {ProxyIndicator} RedirectProxyIndicator
 * @property {string} url
 */

/**
 * type=responseCode
 * @typedef {ProxyIndicator} ResponceCodeProxyIndicator
 * @property {number} code
 */

/**
 * @typedef {object} Resources
 * @property {?Array.<string>} allowed Only `allowed` resources will be loaded. Have higher priority than `denied`
 * @property {?Array.<string>} denied All except `denied` resources will be loaded
 */

/**
 * @typedef {object} Screen
 * @property {number} width
 * @property {number} height
 */

/**
 * @param {ProxyIndicator} proxyIndicator
 * @returns {Error}
 */
function createProxyError(proxyIndicator) {
  var msg = void 0;
  switch (proxyIndicator.type) {
    case 'redirect':
      msg = 'Proxy matched redirect';
      break;
    case 'responseCode':
      msg = 'Proxy matched response code';
      break;
    case 'captcha':
      msg = 'Captcha handled';
      break;
    default:
      throw new Error('Unsupported proxyIndicator');
  }
  var err = new Error(msg);
  err.proxyIndicator = proxyIndicator.type;
  err.proxyLevel = proxyIndicator.level || 'medium';

  return err;
}

/**
 * @param {string} currentUrl
 * @param {string} redirectUri
 * @returns {string}
 * @private
 */
function getRedirectUrl(currentUrl, redirectUri) {
  var parsedCurrentUrl = parseUrl(currentUrl);
  var parsedRedirectUri = parseUrl(redirectUri);
  var hostname = parsedRedirectUri.hostname || parsedCurrentUrl.hostname;
  var protocol = parsedRedirectUri.protocol || parsedCurrentUrl.protocol;

  return protocol + '//' + hostname + parsedRedirectUri.path;
}

/**
 * @param {object} resource
 * @returns {string}
 * @private
 */
function extractRedirectUrl(resource) {
  var redirectUrl = void 0;
  if (resource.redirectUrl) {
    redirectUrl = resource.redirectUrl;
  } else {
    var locationHeader = (resource.headers || []).find(function (header) {
      return header.name && header.name.toLowerCase() === 'location';
    });

    if (locationHeader && locationHeader.value) {
      redirectUrl = locationHeader.value;
    }
  }

  return redirectUrl ? getRedirectUrl(resource.url, redirectUrl) : '';
}

/**
 * @typedef {object} PhantomEnvironmentOptions
 * @property {?number} timeout
 * @property {?boolean} weak
 * @property {?boolean} loadImages
 * @property {?boolean} ignoreSslErrors
 * @property {?string} sslProtocol
 * @property {?string} cookiesFile
 * @property {?boolean} webSecurity
 * @property {?string} phantomPath
 *
 * @property {?string} snapshot perform snapshot during parsing
 * @property {?string} snapshotDir directory for snapshots
 * @property {?Proxy|Array.<Proxy>} proxy single proxy or proxy list
 * @property {Array.<ProxyIndicator>} proxyIndicators Indicators which say that proxy became unreachable
 * @property {?function} proxyRotator proxy rotator function(proxyList, currentProxy) with context of this env. function
 * should return Proxy from the list
 * @property {?string|Array.<string>} userAgent user agent or list of agents for setting to phantom
 * @property {?Screen} screen screen dimensions
 * @property {?Resources} resources white and black lists for loading resources on the page
 */
var defaultOptions = {
  // Phantom options
  timeout: 60 * 1000,
  weak: true,
  loadImages: false,
  ignoreSslErrors: true,
  sslProtocol: 'any',
  cookiesFile: null,
  webSecurity: false,
  phantomPath: path.join(require.resolve('phantomjs-prebuilt'), '../../bin/'),

  // Custom environment options
  snapshot: false,
  snapshotDir: 'snapshots',
  proxy: null,
  proxyRotator: null,
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12', // eslint-disable-line max-len
  screen: {
    width: 1440,
    height: 900
  },
  resources: {
    allowed: null,
    denied: null
  }
};

var port = 13200;

var PhantomEnvironment = function (_AbstractEnvironment) {
  (0, _inherits3.default)(PhantomEnvironment, _AbstractEnvironment);

  /**
   * @param {PhantomEnvironmentOptions} options
   */
  function PhantomEnvironment(options) {
    (0, _classCallCheck3.default)(this, PhantomEnvironment);

    debug('Initializing...');

    var _this = (0, _possibleConstructorReturn3.default)(this, (PhantomEnvironment.__proto__ || (0, _getPrototypeOf2.default)(PhantomEnvironment)).call(this, options));

    _this._options = defaults(clone(options) || {}, defaultOptions);
    _this._proxy = _this._options.proxy;
    _this._proxyIndicators = _this._options.proxyIndicators || [];
    _this._proxyErrors = [];
    _this._proxyCurrent = null;
    _this._url = options.url;
    _this._redirectUrls = [];

    if (!_this._url) {
      throw new Error('You must pass `url` to PhantomEnvironment');
    }

    _this._phantomJS = null;
    _this._page = null;
    _this._navigationActions = [];
    _this._requestingActions = [];
    _this._exitHanlers = [];
    _this._browserEnvInjected = false;
    return _this;
  }

  (0, _createClass3.default)(PhantomEnvironment, [{
    key: 'prepare',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                debug('Preparing...');
                _context.next = 3;
                return (0, _get3.default)(PhantomEnvironment.prototype.__proto__ || (0, _getPrototypeOf2.default)(PhantomEnvironment.prototype), 'prepare', this).call(this);

              case 3:
                _context.next = 5;
                return this._setup();

              case 5:
                _context.next = 7;
                return this._setViewport();

              case 7:
                _context.next = 9;
                return this._setUserAgent();

              case 9:
                _context.next = 11;
                return this._setTimeout();

              case 11:
                _context.next = 13;
                return this._handlePhantomEvents();

              case 13:
                _context.next = 15;
                return this._rotateProxy();

              case 15:
                _context.next = 17;
                return this._navigateTo(this._url);

              case 17:
                _context.next = 19;
                return this._validateProxy();

              case 19:
                _context.next = 21;
                return this._injectFiles(this._getVendors());

              case 21:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function prepare() {
        return _ref.apply(this, arguments);
      }

      return prepare;
    }()
  }, {
    key: 'setProxy',
    value: function setProxy(proxy) {
      this._proxy = proxy;
      return this;
    }
  }, {
    key: 'getProxy',
    value: function getProxy() {
      return this._proxy;
    }
  }, {
    key: 'getOption',
    value: function getOption(name) {
      return this._options[name];
    }
  }, {
    key: 'evaluateJs',
    value: function evaluateJs() {
      var _this2 = this;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return new _promise2.default(function (resolve, reject) {
        var page = _this2._page;

        var evalFunc = args.pop();
        if (typeof evalFunc !== 'function') {
          reject(new Error('You must pass function as last argument to PhantomEnvironment.evaluateJs'));
          return;
        }
        args.unshift(evalFunc, function (results) {
          return resolve(results);
        });

        page.evaluate.apply(page, args);
      });
    }

    /**
     * Take screen snapshot
     * @param {string} fileName
     * @returns {Promise}
     */

  }, {
    key: 'snapshot',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(fileName) {
        var options, screenShotFilePath, screenShotFileName, windowSize;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = this._options;

                if (options.snapshot) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt('return');

              case 3:
                screenShotFilePath = path.join(options.snapshotDir, parseUrl(this._url).hostname);
                screenShotFileName = path.join(screenShotFilePath, fileName + '.png');

                debug('.snapshot() to %s', screenShotFileName);
                _context2.next = 8;
                return mkdir(screenShotFilePath);

              case 8:
                windowSize = {
                  left: 0,
                  top: 0,
                  width: options.screen.width,
                  height: options.screen.height
                };

                this._page.clipRect = windowSize;
                debug('Doing snapshot with window size %o, filepath %s', windowSize, screenShotFileName);
                this._page.render(screenShotFileName);

                _context2.next = 14;
                return new _promise2.default(function (resolve, reject) {
                  var timeout = void 0;

                  var interval = setInterval(function () {
                    if (fs.statSync(screenShotFilePath).size) {
                      clearInterval(interval);
                      clearTimeout(timeout);
                      resolve();
                    }
                  }, 20);

                  timeout = setTimeout(function () {
                    clearInterval(interval);
                    reject(new Error('Snapshot timeout'));
                  }, 500);
                });

              case 14:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function snapshot(_x) {
        return _ref2.apply(this, arguments);
      }

      return snapshot;
    }()
  }, {
    key: 'waitForPage',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var _this3 = this;

        var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5000;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new _promise2.default(function (resolve, reject) {
                  var timeoutId = setTimeout(function () {
                    debug('Timeout %s has reached on page load', timeout);
                    _this3._navigationActions = [];
                    reject(new Error('Page navigation timeout'));
                  }, timeout);

                  _this3._navigationActions.push(function (err) {
                    clearTimeout(timeoutId);
                    if (err) {
                      reject(err);
                    } else {
                      resolve();
                    }
                  });
                  debug('Added page load callback');
                });

              case 2:
                _context3.next = 4;
                return this._injectFiles(this._getVendors());

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function waitForPage() {
        return _ref3.apply(this, arguments);
      }

      return waitForPage;
    }()
  }, {
    key: 'waitForQuery',
    value: function waitForQuery(uri) {
      var _this4 = this;

      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;

      return new _promise2.default(function (resolve, reject) {
        var timeoutId = setTimeout(function () {
          debug('Timeout %s has reached for waiting query %s', timeout, uri);
          _this4._requestingActions = [];
          reject(new Error('Waiting request timeout'));
        }, timeout);

        _this4._requestingActions.push({
          pattern: uri,
          fn: function fn(err, results) {
            clearTimeout(timeoutId);
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
          }
        });
        debug('Added request callback');
      });
    }
  }, {
    key: 'back',
    value: function back() {
      debug('Back');
      this._page.goBack();
      return _promise2.default.resolve();
    }
  }, {
    key: 'mouseClick',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(selector) {
        var position;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._getElementPosition(selector);

              case 2:
                position = _context4.sent;

                this._page.sendEvent('mousedown', position.x, position.y);
                this._page.sendEvent('mouseup', position.x, position.y);

              case 5:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function mouseClick(_x4) {
        return _ref4.apply(this, arguments);
      }

      return mouseClick;
    }()
  }, {
    key: 'mouseMove',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(selector) {
        var position;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._getElementPosition(selector);

              case 2:
                position = _context5.sent;

                this._page.sendEvent('mousemove', position.x, position.y);

              case 4:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function mouseMove(_x5) {
        return _ref5.apply(this, arguments);
      }

      return mouseMove;
    }()
  }, {
    key: 'mouseDown',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(selector) {
        var position;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._getElementPosition(selector);

              case 2:
                position = _context6.sent;

                this._page.sendEvent('mousedown', position.x, position.y);

              case 4:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function mouseDown(_x6) {
        return _ref6.apply(this, arguments);
      }

      return mouseDown;
    }()
  }, {
    key: 'mouseUp',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(selector) {
        var position;
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._getElementPosition(selector);

              case 2:
                position = _context7.sent;

                this._page.sendEvent('mouseup', position.x, position.y);

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function mouseUp(_x7) {
        return _ref7.apply(this, arguments);
      }

      return mouseUp;
    }()
  }, {
    key: '_getElementPosition',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(selector) {
        var position;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.evaluateJs(selector, /* @covignore */function (selector) {
                  // eslint-disable-line no-shadow
                  var node = Sizzle(selector)[0]; // eslint-disable-line no-undef
                  if (!node) {
                    return null;
                  }

                  var rect = node.getBoundingClientRect();
                  return {
                    x: rect.left + rect.width / 2,
                    y: rect.top + rect.height / 2
                  };
                });

              case 2:
                position = _context8.sent;

                if (position) {
                  _context8.next = 5;
                  break;
                }

                throw new Error('Position of element ' + selector + ' was not found');

              case 5:
                debug('Element position is %o', position);
                return _context8.abrupt('return', position);

              case 7:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function _getElementPosition(_x8) {
        return _ref8.apply(this, arguments);
      }

      return _getElementPosition;
    }()

    /**
     * Set up a fresh phantomjs page.
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_setup',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._createInstance();

              case 2:
                _context9.next = 4;
                return this._createPage();

              case 4:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function _setup() {
        return _ref9.apply(this, arguments);
      }

      return _setup;
    }()

    /**
     * Create a phantomjs instance.
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_createInstance',
    value: function _createInstance() {
      var _this5 = this;

      return new _promise2.default(function (resolve) {
        var options = _this5._options;
        var flags = [];
        debug('.createInstance() creating Phantom instance with options %o', options);
        flags.push('--load-images=' + options.loadImages);
        flags.push('--ignore-ssl-errors=' + options.ignoreSslErrors);
        flags.push('--ssl-protocol=' + options.sslProtocol);
        flags.push('--web-security=' + options.webSecurity);

        if (options.cookiesFile !== null) {
          flags.push('--cookies-file=' + options.cookiesFile);
        }

        // dnode options for compilation on windows
        var dnodeOpts = {};
        if (options.weak === false) {
          dnodeOpts = { weak: false };
        }

        // combine flags, options and callback into args
        var args = flags;
        args.push({
          port: options.port || (port += 1),
          dnodeOpts: dnodeOpts,
          path: options.phantomPath,
          onExit: _this5._handleExit.bind(_this5)
        });
        args.push(function (instance) {
          _this5._phantomJS = instance;
          resolve(instance);
        });
        phantom.create.apply(phantom, args);
      });
    }

    /**
     * Creates new page in phantom
     * @returns {Promise}
     */

  }, {
    key: '_createPage',
    value: function _createPage() {
      var _this6 = this;

      return new _promise2.default(function (resolve) {
        debug('._createPage() has called');
        _this6._phantomJS.createPage(function (page) {
          _this6._page = page;
          debug('._createPage() phantom page created');
          resolve(page);
        });
      });
    }

    /**
     * Tear down a phantomjs instance.
     */

  }, {
    key: 'tearDown',
    value: function tearDown() {
      var _this7 = this;

      return new _promise2.default(function (resolve) {
        debug('._tearDownInstance() tearing down');
        var phantomJs = _this7._phantomJS;
        if (!phantomJs || !phantomJs.process) {
          debug('Phantom process already exited, not killing');
          resolve();
          return;
        }

        var pid = phantomJs.process.pid;

        debug('Terminating phantom process gracefully, pid: ', pid);
        if (_this7._page) {
          _this7._page.close();
          delete _this7._page;
        }

        phantomJs.exit();

        var timeout = void 0;

        function resolver() {
          clearTimeout(timeout);
          resolve();
        }

        timeout = setTimeout(function () {
          var i = _this7._exitHanlers.indexOf(resolver);
          if (i !== -1) {
            _this7._exitHanlers.splice(i, 1);
          }

          debug('phantom time is out, kill it and go ahead');
          if (phantomJs.process) {
            phantomJs.process.kill('SIGKILL');
          }

          resolve();
        }, 5000); // 5 sec to die

        _this7._exitHanlers.push(resolver);

        delete _this7._phantomJS;
      });
    }

    /**
     * Handles the phantom process ending/crashing unexpectedly.
     * If an `onExit` handler has been bound then that will be called. Otherwise, the error will be re-thrown.
     * @param {Number} code
     * @param {String} [signal]
     */

  }, {
    key: '_handleExit',
    value: function _handleExit(code, signal) {
      debug('Phantom exited with code ' + code + ' and signal ' + signal);
      // delete this._phantomJS.process;

      // otherwise, if we have a non-zero code we'll throw a better error message
      // than the `phantom` lib would.
      if (code !== 0) {
        var err = new Error('The PhantomJS process ended unexpectedly');
        err.code = code;
        err.signal = signal;
        // throw err;
      }

      this._exitHanlers.forEach(function (handler) {
        return handler(code);
      });
      this._exitHanlers = [];
    }

    /**
     * Go to url
     * @param url
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_navigateTo',
    value: function _navigateTo(url) {
      var _this8 = this;

      return new _promise2.default(function (resolve, reject) {
        _this8._openPage(url, resolve, reject);
      });
    }
  }, {
    key: '_openPage',
    value: function _openPage(url, resolve, reject) {
      var _this9 = this;

      debug('.goto() url: ' + url);
      this._page.open(url, function () {
        var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(status) {
          var proxy;
          return _regenerator2.default.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  debug('.goto() page loaded: ' + status);

                  if (!(status === 'success')) {
                    _context10.next = 4;
                    break;
                  }

                  resolve();
                  return _context10.abrupt('return');

                case 4:
                  _context10.prev = 4;
                  _context10.next = 7;
                  return _this9._rotateProxy();

                case 7:
                  proxy = _context10.sent;

                  if (!(proxy === null)) {
                    _context10.next = 11;
                    break;
                  }

                  reject(new Error('Page ' + url + ' was not loaded'));
                  return _context10.abrupt('return');

                case 11:

                  // one more attempt to open page through the new proxy
                  _this9._openPage(url, resolve, reject);
                  _context10.next = 17;
                  break;

                case 14:
                  _context10.prev = 14;
                  _context10.t0 = _context10['catch'](4);

                  reject(_context10.t0);

                case 17:
                case 'end':
                  return _context10.stop();
              }
            }
          }, _callee10, _this9, [[4, 14]]);
        }));

        return function (_x9) {
          return _ref10.apply(this, arguments);
        };
      }());
    }

    /**
     * Set the viewport.
     *
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_setViewport',
    value: function _setViewport() {
      var _this10 = this;

      return new _promise2.default(function (resolve) {
        var screen = _this10._options.screen;
        if (Array.isArray(screen)) {
          screen = sample(screen);
        }
        var width = screen.width;
        var height = screen.height;
        debug('.viewport() to ' + width + ' x ' + height);
        var viewport = { width: width, height: height };
        _this10._options.screen = viewport;
        _this10._page.set('viewportSize', viewport, function () {
          return resolve();
        });
      });
    }

    /**
     * Set the user agent.
     *
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_setUserAgent',
    value: function _setUserAgent() {
      var _this11 = this;

      return new _promise2.default(function (resolve) {
        var userAgent = _this11._options.userAgent;
        if (Array.isArray(userAgent)) {
          userAgent = sample(_this11._options.userAgent);
        }
        debug('.userAgent() to ' + userAgent);
        _this11._page.set('settings.userAgent', userAgent, function () {
          return resolve();
        });
      });
    }

    /**
     * Set timeout.
     *
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_setTimeout',
    value: function _setTimeout() {
      var _this12 = this;

      return new _promise2.default(function (resolve) {
        var timeout = _this12._options.timeout;
        debug('.timeout() to ' + timeout);
        _this12._page.set('settings.resourceTimeout', timeout, function () {
          return resolve();
        });
      });
    }

    /**
     * @param {Error} error
     */

  }, {
    key: 'addProxyError',
    value: function addProxyError(error) {
      this._proxyErrors.push(error);
    }

    /**
     * @returns {Array.<Error>}
     */

  }, {
    key: 'getProxyErrors',
    value: function getProxyErrors() {
      return this._proxyErrors;
    }

    /**
     * @param type
     * @returns {Array.<ProxyIndicator>}
     */

  }, {
    key: 'getProxyIndicators',
    value: function getProxyIndicators(type) {
      return this._proxyIndicators.filter(function (item) {
        return item.type === type;
      });
    }

    /**
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_validateProxy',
    value: function _validateProxy() {
      return this.getProxyErrors().length === 0 ? _promise2.default.resolve() : _promise2.default.reject(this.getProxyErrors().pop());
    }

    /**
     * Set a proxy from the proxy list (unset previous one)
     *
     * @returns {Promise}
     * @private
     */

  }, {
    key: '_rotateProxy',
    value: function () {
      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
        var proxy, currentProxy, proxyRotator, foundProxy;
        return _regenerator2.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                proxy = this._proxy;
                currentProxy = this._proxyCurrent;

                if (proxy) {
                  _context11.next = 4;
                  break;
                }

                return _context11.abrupt('return', null);

              case 4:
                if (Array.isArray(proxy)) {
                  _context11.next = 6;
                  break;
                }

                return _context11.abrupt('return', this._applyProxy(proxy));

              case 6:

                this._removeUnavailableProxy();
                proxyRotator = this._options.proxyRotator;

                if (!(typeof proxyRotator === 'function')) {
                  _context11.next = 14;
                  break;
                }

                _context11.next = 11;
                return proxyRotator(proxy, currentProxy);

              case 11:
                _context11.t0 = _context11.sent;
                _context11.next = 15;
                break;

              case 14:
                _context11.t0 = sample(proxy);

              case 15:
                foundProxy = _context11.t0;


                this._proxyErrors = [];

                if (foundProxy) {
                  _context11.next = 19;
                  break;
                }

                throw new Error('No proxy found');

              case 19:
                return _context11.abrupt('return', this._applyProxy(foundProxy));

              case 20:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function _rotateProxy() {
        return _ref11.apply(this, arguments);
      }

      return _rotateProxy;
    }()

    /**
     * Apply proxy to Phantom
     * @private
     */

  }, {
    key: '_applyProxy',
    value: function _applyProxy(proxy) {
      var _this13 = this;

      return new _promise2.default(function (resolve) {
        _this13._phantomJS.setProxy(proxy.host, proxy.port, 'manual', proxy.username, proxy.password, function () {
          debug('Proxy applied %o', proxy);
          _this13._proxyCurrent = proxy;
          resolve(proxy);
        });
      });
    }

    /**
     * Remove from proxy list one which doesn't work
     *
     * @returns {?Proxy}
     * @private
     */

  }, {
    key: '_removeUnavailableProxy',
    value: function _removeUnavailableProxy() {
      var current = this._proxyCurrent;
      if (!Array.isArray(this._proxy) || this._proxy.length === 0 || current === null) {
        return null;
      }

      debug('._removeUnavailableProxy()');
      var index = this._proxy.findIndex(function (item) {
        return item.host === current.host && item.port === current.port;
      });
      var proxy = null;
      if (index !== -1) {
        // cut off old used proxy from the list
        proxy = this._proxy.splice(index, 1);
      }
      return Array.isArray(proxy) ? proxy.pop() : null;
    }
  }, {
    key: '_injectFiles',
    value: function _injectFiles(filePaths) {
      var _this14 = this;

      filePaths.forEach(function (filePath) {
        debug('injecting file %s', filePath);
        _this14._page.injectJs(filePath);
      });
      return _promise2.default.resolve();
    }
  }, {
    key: 'injectBrowserEnv',
    value: function injectBrowserEnv() {
      if (this._browserEnvInjected) {
        return _promise2.default.resolve();
      }

      debug('.inject()-ing browser env libs');
      return this._injectFiles([path.join(__dirname, '../build/browser.bundle.js')]);
    }

    /**
     * @param {string} [urlPattern]
     * @returns {boolean}
     */

  }, {
    key: 'hasRedirect',
    value: function hasRedirect(urlPattern) {
      if (urlPattern === undefined) {
        return this._redirectUrls.length > 0;
      }
      return this._redirectUrls.some(function (url) {
        return url.match(urlPattern) !== null;
      });
    }
  }, {
    key: '_handlePhantomEvents',
    value: function _handlePhantomEvents() {
      var _this15 = this;

      var page = this._page;

      page.set('onError', function (msg, trace) {
        phantomError('%s, trace %o, fire %s errbacks', msg, trace, _this15._errbacks.length);
        // this._errbacks.splice(0).forEach(errback => errback(msg, trace));
      });

      // todo: make it workable
      page.set('onConsoleMessage', function (msg) {
        var regex = /^(\[GooseParser])(.+)/i;
        var found = msg.match(regex);

        if (found) {
          debugParser(found[2].trim());
        } else {
          debug('Phantom page message: ' + msg);
        }
      });

      page.set('onNavigationRequested', function (url) {
        debug('Navigation to %s', url);
        var i = 0;
        var actions = _this15._requestingActions;
        while (i < actions.length) {
          var action = actions[i];
          if (url.match(action.pattern)) {
            actions.shift();
            action.fn(null, url);
          } else {
            i += 1;
          }
        }
      });

      page.set('onLoadFinished', function (status) {
        debug('Page loaded with status %s, fire %s callbacks', status, _this15._navigationActions.length);
        _this15._navigationActions.splice(0).forEach(function (callback) {
          callback.call(_this15, status === 'success' ? null : new Error('Page is not loaded'));
        });
      });

      page.set('onResourceError', function (resourceError) {
        debug('Navigation error %s %s', resourceError.url, resourceError.errorString);
        var matched = _this15.getProxyIndicators('responseCode').find(function (item) {
          return item.code === resourceError.status;
        });
        if (matched) {
          _this15.addProxyError(createProxyError(matched));
        }
      });

      page.onResourceRequested( /* @covignore */function (requestData, request, allowedUrls, blockedUrls) {
        var url = requestData.url;
        var hasAllowedUrls = Array.isArray(allowedUrls) && allowedUrls.length > 0;
        var hasBlockedUrls = Array.isArray(blockedUrls) && blockedUrls.length > 0;
        var allowed = !hasAllowedUrls || allowedUrls.some(function (urlPattern) {
          return url.match(urlPattern) !== null;
        });

        var blocked = false;
        if (!hasAllowedUrls && hasBlockedUrls) {
          blocked = blockedUrls.some(function (urlPattern) {
            return url.match(urlPattern) !== null;
          });
        }

        if (!allowed || blocked) {
          console.log( // eslint-disable-line no-console
          '[GooseParser] Resource ' + requestData.url.substr(0, 30) + ' was aborted');
          request.abort();
        }
      }, function () {}, this._options.resources.allowed, this._options.resources.denied);

      page.set('onResourceReceived', function (resource) {
        // redirect has occurred
        if ([302, 301].indexOf(resource.status) !== -1) {
          var redirectUrl = extractRedirectUrl(resource) || '';

          // if current url matches with this._url or with the last redirect url from this._redirectUrls
          if (redirectUrl && (resource.url === _this15._url || resource.url === _this15._redirectUrls[_this15._redirectUrls.length - 1])) {
            debug('Redirect to %s', redirectUrl);
            _this15._redirectUrls.push(redirectUrl);
          }
          var matched = _this15.getProxyIndicators('redirect').find(function (item) {
            return redirectUrl.match(item.url);
          });
          if (matched) {
            _this15.addProxyError(createProxyError(matched));
          }
        }
      });
    }
  }]);
  return PhantomEnvironment;
}(AbstractEnvironment);

module.exports = PhantomEnvironment;